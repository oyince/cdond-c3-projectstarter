version: 2.1

commands:          
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
         type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/WzHQc1HqQJMAesrDbHhjf1/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi
            
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #            cd backend
  #            npm install
  #            npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Test frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test
                
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Test backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test
            
  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Analyze frontend
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Analyze backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: yum install tar gzip -y
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
  #           cat .circleci/ansible/inventory.txt
  #           # aws ec2 describe-instances \
  #           # --query "Reservations[*].Instances[*].[PublicIpAddress]" \
  #           # --filters "Name=tag:name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           # --output text >> ~/project/.circleci/ansible/inventory.txt
  #           # cat ~/project/.circleci/ansible/inventory.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}          

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7.16-alpine3.17  
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - '49:4f:41:84:e6:5c:cb:18:08:44:73:12:1e:53:a7:31'
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache ansible tar gzip aws-cli openssh
  #     - attach_workspace:
  #         at: ~/  
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml
  #         no_output_timeout: 30m  
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #           cat migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             curl --insecure https://kvdb.io/WzHQc1HqQJMAesrDbHhjf1/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
  #           fi
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  # deploy-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Install AWS CLI dependencies
  #         working_directory: /tmp
  #         command: |
  #           sudo apt-get update && sudo apt-get install -yy less
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Get backend Url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --filters "Name=tag:Name,Values=backend-<IDENTIFIER>" \
  #           --query "Reservations[*].Instances[*].PublicIpAddress" \
  #           --output text)
  #           API_URL=$(curl --insecure  https://kvdb.io/WzHQc1HqQJMAesrDbHhjf1/backend_url)
  #           echo "${API_URL}"
  #           echo "NODE_ENV=production" >> frontend/.env
  #           echo "API_URL=${API_URL}" >> frontend/.env
  #           cat frontend/.env
  #           #API_URL=http://$BACKEND_PUBLIC_IP:3030
  #     - run:
  #         name: Deploy frontend objects to S3
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - frontend/dist
  #     # # Checkout code from git
  #     # - run:
  #     #     name: Install dependencies
  #     #     command: |
  #     #       apk add --update --no-cache tar
  #     #       apk add --update --no-cache gzip
  #     #       apk add --update --no-cache nodejs
  #     #       apk add --update --no-cache npm
  #     #       apk add --update --no-cache aws-cli
  #     #       apk add --update --no-cache curl 
  #     # - run:
  #     #     name: Get backend url
  #     #     working_directory: ./frontend
  #     #     command: |
  #     #       export BACKEND_IP=$(aws ec2 describe-instances \
  #     #       --query "Reservations[*].Instances[*].PublicIpAddress" \
  #     #       --filters "Name=tag:name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #     #       --output text)
  #     #       export API_URL="http://${BACKEND_IP}:3030"
  #     #       echo "API_URL = ${API_URL}"
  #     #       echo "API_URL=http://${BACKEND_IP}:3030" >> .env
  #     #       cat .env
  #     # - restore_cache:
  #     #      keys: [frontend-build]
  #     # - run:
  #     #     name: Deploy frontend objects
  #     #     command: |
  #     #       cd frontend
  #     #       npm install
  #     #       npm run build
  #     #       tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #     #       aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  # deploy-backend:
  #   docker:
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints:
  #           - '49:4f:41:84:e6:5c:cb:18:08:44:73:12:1e:53:a7:31'
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm aws-cli ansible curl
  #     # attach workspace
  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           pwd
  #           cd backend
  #           touch .env
  #           echo ENVIRONMENT=production > ".env"
  #           echo TYPEORM_CONNECTION=postgres >> ".env"
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
  #           echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
  #           echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
  #           echo NODE_ENV=production >> ".env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            
  #           pwd
  #           ls -al
  #           npm install
  #           npm run build
  #           cd ..
  #           pwd
  #           ls -al
  #           # Zip the directory
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image
  #     - image: python:3.10-alpine3.16 
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar gzip nodejs npm curl aws-cli
  #     - run:
  #         name: Get backend url and Backend smoke test.
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #           --query "Reservations[*].Instances[*].[PublicIpAddress]" \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text)
  #           echo ${BACKEND_IP}
            
  #           export BACKEND=$(echo $BACKEND_IP | grep -o '[^ ]*$')
            
  #           echo $BACKEND
  #           export API_URL="http://${BACKEND}:3030"
  #           echo "API_URL=${API_URL}"
  #           echo "Sleeping for 1 minute"
  #           sleep 60
  #           if curl -v "${API_URL}/api/status" | grep "ok"
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi 
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
  #           echo ${URL}            
  #           if curl -s ${URL} | grep "Welcome"
  #           then
  #             # Change this to 0 after the job fails
  #             return 0
  #           else
  #             return 1
  #           fi
      
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text | grep -o '[^-]*$' )
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo OldWorkflowID: cat ~/project/OldWorkflowID.txt
            echo CurrentWorflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl https://kvdb.io/42mV4KeiPmRdBdCu4LhNtH/workflowid -d '1')
              #  curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request GET https://api.memstash.io/values/workflowid)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ $OldWorkflowID == "" ]]
            then
            echo "No workflow id found"
            else
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi
            fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #       requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #       filters:
      #         branches:
      #           only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cleanup
      #     requires: [cloudfront-update]